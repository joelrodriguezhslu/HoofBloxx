{"ast":null,"code":"import _toConsumableArray from \"/home/jr/simple-nft-example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/jr/simple-nft-example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect, useCallback } from 'react';\n/**\r\n * Enables you to keep track of events\r\n *\r\n * ~ Features ~\r\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\r\n  - Specify the name of the contract, in this case it is \"YourContract\"\r\n  - Specify the name of the event in the contract, in this case we keep track of \"SetPurpose\" event\r\n  - Specify the provider\r\n * @param contracts\r\n * @param contractName\r\n * @param eventName\r\n * @param provider\r\n * @param startBlock\r\n * @param args\r\n * @returns\r\n */\n\nexport var useEventListener = function useEventListener(contracts, contractName, eventName, provider, startBlock) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      updates = _useState2[0],\n      setUpdates = _useState2[1];\n\n  var addNewEvent = useCallback(function () {\n    for (var _len = arguments.length, events = new Array(_len), _key = 0; _key < _len; _key++) {\n      events[_key] = arguments[_key];\n    }\n\n    if (events != null && events.length > 0) {\n      var last = events[events.length - 1];\n      setUpdates(function (value) {\n        return [last].concat(_toConsumableArray(value));\n      });\n    }\n  }, []);\n  useEffect(function () {\n    if (provider) {\n      // if you want to read _all_ events from your contracts, set this to the block number it is deployed\n      provider.resetEventsBlock(startBlock);\n    }\n\n    if ((contracts === null || contracts === void 0 ? void 0 : contracts[contractName]) != null) {\n      try {\n        contracts[contractName].on(eventName, addNewEvent);\n        return function () {\n          contracts[contractName].off(eventName, addNewEvent);\n        };\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, [provider, startBlock, contracts, contractName, eventName, addNewEvent]);\n  return updates;\n};","map":{"version":3,"sources":["/home/jr/simple-nft-example/node_modules/eth-hooks/events/useEventListener.js"],"names":["useState","useEffect","useCallback","useEventListener","contracts","contractName","eventName","provider","startBlock","updates","setUpdates","addNewEvent","events","length","last","value","resetEventsBlock","on","off","e","console","log"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,SAAD,EAAYC,YAAZ,EAA0BC,SAA1B,EAAqCC,QAArC,EAA+CC,UAA/C,EAA8D;AAC1F,kBAA8BR,QAAQ,CAAC,EAAD,CAAtC;AAAA;AAAA,MAAOS,OAAP;AAAA,MAAgBC,UAAhB;;AACA,MAAMC,WAAW,GAAGT,WAAW,CAAC,YAAe;AAAA,sCAAXU,MAAW;AAAXA,MAAAA,MAAW;AAAA;;AAC3C,QAAIA,MAAM,IAAI,IAAV,IAAkBA,MAAM,CAACC,MAAP,GAAgB,CAAtC,EAAyC;AACrC,UAAMC,IAAI,GAAGF,MAAM,CAACA,MAAM,CAACC,MAAP,GAAgB,CAAjB,CAAnB;AACAH,MAAAA,UAAU,CAAC,UAACK,KAAD;AAAA,gBAAYD,IAAZ,4BAAqBC,KAArB;AAAA,OAAD,CAAV;AACH;AACJ,GAL8B,EAK5B,EAL4B,CAA/B;AAMAd,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIM,QAAJ,EAAc;AACV;AACAA,MAAAA,QAAQ,CAACS,gBAAT,CAA0BR,UAA1B;AACH;;AACD,QAAI,CAACJ,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACC,YAAD,CAAhE,KAAmF,IAAvF,EAA6F;AACzF,UAAI;AACAD,QAAAA,SAAS,CAACC,YAAD,CAAT,CAAwBY,EAAxB,CAA2BX,SAA3B,EAAsCK,WAAtC;AACA,eAAO,YAAM;AACTP,UAAAA,SAAS,CAACC,YAAD,CAAT,CAAwBa,GAAxB,CAA4BZ,SAA5B,EAAuCK,WAAvC;AACH,SAFD;AAGH,OALD,CAMA,OAAOQ,CAAP,EAAU;AACNC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ;AACJ,GAhBQ,EAgBN,CAACZ,QAAD,EAAWC,UAAX,EAAuBJ,SAAvB,EAAkCC,YAAlC,EAAgDC,SAAhD,EAA2DK,WAA3D,CAhBM,CAAT;AAiBA,SAAOF,OAAP;AACH,CA1BM","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\n/**\r\n * Enables you to keep track of events\r\n *\r\n * ~ Features ~\r\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\r\n  - Specify the name of the contract, in this case it is \"YourContract\"\r\n  - Specify the name of the event in the contract, in this case we keep track of \"SetPurpose\" event\r\n  - Specify the provider\r\n * @param contracts\r\n * @param contractName\r\n * @param eventName\r\n * @param provider\r\n * @param startBlock\r\n * @param args\r\n * @returns\r\n */\r\nexport const useEventListener = (contracts, contractName, eventName, provider, startBlock) => {\r\n    const [updates, setUpdates] = useState([]);\r\n    const addNewEvent = useCallback((...events) => {\r\n        if (events != null && events.length > 0) {\r\n            const last = events[events.length - 1];\r\n            setUpdates((value) => [last, ...value]);\r\n        }\r\n    }, []);\r\n    useEffect(() => {\r\n        if (provider) {\r\n            // if you want to read _all_ events from your contracts, set this to the block number it is deployed\r\n            provider.resetEventsBlock(startBlock);\r\n        }\r\n        if ((contracts === null || contracts === void 0 ? void 0 : contracts[contractName]) != null) {\r\n            try {\r\n                contracts[contractName].on(eventName, addNewEvent);\r\n                return () => {\r\n                    contracts[contractName].off(eventName, addNewEvent);\r\n                };\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n    }, [provider, startBlock, contracts, contractName, eventName, addNewEvent]);\r\n    return updates;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}