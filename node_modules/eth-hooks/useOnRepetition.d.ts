import { Provider } from '@ethersproject/providers';
/**
 * A combination of useOnBlock and usePoller
 * helper hook to call a function regularly at time intervals when the block changes
 * @param provider ethers/web3 provider
 * @param callback any function
 * @param args function parameters
 */
/**
 * A combination of useOnBlock and usePoller
 * - the hook will invoke a callback regularly on the "block" event.  If a pollTime is provided,
 * it will use that instead.
 * - the hook will invoke the callback when the leadTrigger changes state to true as a leading invokation
 * @param callback
 * @param options pollTime?: number; provider?: Provider | undefined; leadTrigger?: boolean;
 * @param args varargs callback function arguments
 */
export declare const useOnRepetition: (callback: (..._args: any[]) => void | Promise<void>, options: {
    pollTime?: number;
    provider?: Provider | undefined;
    leadingTrigger?: boolean;
}, ...args: any[]) => void;
//# sourceMappingURL=useOnRepetition.d.ts.map