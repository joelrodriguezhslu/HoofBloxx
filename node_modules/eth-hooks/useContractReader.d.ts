import { Contract } from 'ethers';
/**
 * Enables you to read values from contracts and keep track of them in the local React states
 *
  ~ Features ~
  - Provide readContracts by loading contracts (see more on ContractLoader.js)
  - Specify the name of the contract, in this case it is "YourContract"
  - Specify the name of the variable in the contract, in this case we keep track of "purpose" variable
  - Pass an args array if the function requires
  - Pass pollTime - if no pollTime is specified, the function will update on every new block
 * @param contracts hash of all [contractName]: Contract
 * @param contractName contractName
 * @param functionName functionName
 * @param functionArgs arguments to functions
 * @param pollTime
 * @param formatter
 * @param onChange callback for value change
 * @returns
 */
export declare const useContractReader: <T>(contracts: Record<string, Contract>, contractName: string, functionName: string, functionArgs?: any[], pollTime?: number | undefined, formatter?: ((_value: T) => T) | undefined, onChange?: ((_value?: T | undefined) => void) | undefined) => T | undefined;
//# sourceMappingURL=useContractReader.d.ts.map